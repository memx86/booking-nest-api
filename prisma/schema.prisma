// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  email        String  @unique
  password     String
  refreshToken String?

  phone      String?     @default("Not specified")
  apartments Apartment[]
  orders     Order[]
  reviews    Review[]

  @@map("users")
}

model Apartment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title    String
  descr    String
  imgUrl   String
  price    Int
  userId   Int
  cityId   Int
  owner    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  orders   Order[]
  reviews  Review[]

  @@map("apartments")
}

model Order {
  id          Int       @id @default(autoincrement())
  date        DateTime  @default(now())
  apartmentId Int
  userId      Int
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  owner       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model City {
  id         Int         @id @default(autoincrement())
  city       String
  apartments Apartment[]

  @@map("cities")
}

model Review {
  id          Int       @id @default(autoincrement())
  content     String
  rating      Int
  userId      Int
  apartmentId Int
  owner       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)

  @@map("reviews")
}
